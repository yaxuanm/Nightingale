import React, { useState, useEffect } from 'react';
import { View, StyleSheet } from 'react-native';
import { Text, IconButton, Surface, Slider } from 'react-native-paper';
import { SafeAreaView } from 'react-native-safe-area-context';
import {
  setupPlayer,
  togglePlayback,
  skipToNext,
  skipToPrevious,
  getProgress,
  seekTo,
  setVolume,
} from '../services/AudioService';

const formatTime = (seconds) => {
  const mins = Math.floor(seconds / 60);
  const secs = Math.floor(seconds % 60);
  return `${mins}:${secs.toString().padStart(2, '0')}`;
};

const PlayerScreen = () => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [isFavorite, setIsFavorite] = useState(false);
  const [volume, setVolumeState] = useState(50);
  const [progress, setProgressState] = useState(0);
  const [duration, setDuration] = useState(0);

  useEffect(() => {
    setupPlayer();
    const interval = setInterval(async () => {
      const { position, duration } = await getProgress();
      setProgressState(position);
      setDuration(duration);
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  const handlePlayPause = async () => {
    await togglePlayback();
    setIsPlaying(!isPlaying);
  };

  const handleVolumeChange = async (value) => {
    setVolumeState(value);
    await setVolume(value);
  };

  const handleProgressChange = async (value) => {
    setProgressState(value);
    await seekTo(value);
  };

  return (
    <SafeAreaView style={styles.container}>
      <Surface style={styles.playerCard}>
        <View style={styles.header}>
          <Text variant="titleLarge" style={styles.title}>
            Cozy Rainy Afternoon
          </Text>
          <Text variant="bodyMedium" style={styles.subtitle}>
            Generated by Nightingale
          </Text>
        </View>

        <View style={styles.progressContainer}>
          <Slider
            value={progress}
            onValueChange={handleProgressChange}
            style={styles.progressSlider}
            minimumValue={0}
            maximumValue={duration}
          />
          <View style={styles.timeContainer}>
            <Text variant="bodySmall">{formatTime(progress)}</Text>
            <Text variant="bodySmall">{formatTime(duration)}</Text>
          </View>
        </View>

        <View style={styles.controls}>
          <IconButton
            icon="skip-previous"
            size={32}
            onPress={skipToPrevious}
          />
          <IconButton
            icon={isPlaying ? "pause" : "play"}
            size={48}
            onPress={handlePlayPause}
            style={styles.playButton}
          />
          <IconButton
            icon="skip-next"
            size={32}
            onPress={skipToNext}
          />
        </View>

        <View style={styles.footer}>
          <View style={styles.volumeContainer}>
            <IconButton
              icon="volume-up"
              size={24}
              onPress={() => {}}
            />
            <Slider
              value={volume}
              onValueChange={handleVolumeChange}
              style={styles.volumeSlider}
              minimumValue={0}
              maximumValue={100}
            />
          </View>
          <IconButton
            icon={isFavorite ? "heart" : "heart-outline"}
            size={24}
            onPress={() => setIsFavorite(!isFavorite)}
          />
        </View>
      </Surface>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#1a2332',
    padding: 16,
  },
  playerCard: {
    padding: 24,
    borderRadius: 16,
    backgroundColor: 'rgba(255, 255, 255, 0.08)',
    borderWidth: 1.5,
    borderColor: 'rgba(255, 255, 255, 0.13)',
  },
  header: {
    alignItems: 'center',
    marginBottom: 32,
  },
  title: {
    color: '#fff',
    marginBottom: 8,
  },
  subtitle: {
    color: '#ccc',
  },
  progressContainer: {
    marginBottom: 32,
  },
  progressSlider: {
    height: 40,
  },
  timeContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 8,
  },
  controls: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 32,
  },
  playButton: {
    backgroundColor: '#2d9c93',
    marginHorizontal: 24,
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  volumeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  volumeSlider: {
    flex: 1,
    marginLeft: 8,
  },
});

export default PlayerScreen; 