#!/usr/bin/env python3
"""
测试 Story Mode 的 prompt 生成和 Stable Audio 调用
"""

import os
import sys
import traceback

# 设置环境变量
os.environ['HF_TOKEN'] = 'your-huggingface-token-here'  # 替换为你的token
os.environ['GEMINI_API_KEY'] = 'AIzaSyAqeUjWY_u59F_Tbxm3FfE9JTJqoGMdZAI'

def test_story_prompt():
    """测试Story Mode的prompt生成"""
    print("🔧 测试 Story Mode 的 prompt 生成")
    print("=" * 50)
    
    try:
        # 导入服务
        from app.services.ai_service import AIService
        from app.services.stable_audio_service import stable_audio_service
        
        # 初始化AI服务
        ai_service = AIService()
        
        # 测试故事描述
        original_description = "A young wizard discovers an ancient library hidden in the depths of a mystical forest. The air is thick with the scent of old books and the gentle whisper of forgotten spells."
        print(f"原始故事描述: {original_description}")
        
        # 生成简化的 soundscape prompt
        soundscape_prompt = f"""
Based on the story description, create a simple audio prompt for background soundscape generation. Focus on 2-3 core sound elements that would complement the narrative. Keep it concise and specific.

Story: {original_description}

Generate a simple audio prompt with 2-3 sound elements. Use ONLY concrete, specific sound types that Stable Audio can generate well:
- Environmental sounds: Rain, Wind, Ocean waves, Forest sounds, Bird songs, Thunder
- Urban sounds: Traffic, Car horns, Cafe ambience, Coffee machine, Footsteps
- Nature sounds: Water dripping, Fire crackling, Leaves rustling, Stream flowing
- Mechanical sounds: Clock ticking, Fan humming, Air conditioning, Engine running

Examples of good prompts: "Forest sounds with bird songs", "Rain with distant thunder", "Cafe ambience with coffee machine", "Ocean waves with seagull calls"

Avoid abstract or poetic descriptions. Focus on specific, concrete sounds that can be generated by audio models.
"""
        
        print(f"发送给AI的prompt: {soundscape_prompt}")
        
        # 调用AI生成prompt
        response = ai_service.client.models.generate_content(
            model=ai_service._get_current_model(),
            contents=soundscape_prompt
        )
        
        stable_audio_prompt = response.text.strip() if response and response.text else "Forest ambience with bird songs"
        # 清理prompt，只取第一行
        stable_audio_prompt = stable_audio_prompt.split('\n')[0].strip()
        
        # 如果生成的prompt包含抽象词汇，使用fallback
        abstract_words = ['whispering', 'faint', 'celestial', 'hint', 'suggestion', 'gentle', 'soft', 'subtle']
        if any(word in stable_audio_prompt.lower() for word in abstract_words):
            print(f"生成的prompt包含抽象词汇，使用fallback")
            stable_audio_prompt = "Forest sounds with bird songs"
        
        print(f"生成的Stable Audio prompt: '{stable_audio_prompt}'")
        
        # 测试Stable Audio生成
        print(f"\n开始测试Stable Audio生成...")
        audio_path = stable_audio_service.generate_audio(stable_audio_prompt, duration=10.0)
        
        print(f"✅ 音频生成成功: {audio_path}")
        
        # 检查文件是否存在
        if os.path.exists(audio_path):
            file_size = os.path.getsize(audio_path)
            print(f"文件大小: {file_size} bytes")
        else:
            print("❌ 文件不存在")
            
    except Exception as e:
        print(f"❌ 错误: {e}")
        print("详细错误信息:")
        traceback.print_exc()

if __name__ == "__main__":
    test_story_prompt() 